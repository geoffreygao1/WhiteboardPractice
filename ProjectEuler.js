// Problem #1
// Solve Problem 1 on Project Euler using a functional approach. Here is the problem:

// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

// Find the sum of all the multiples of 3 or 5 below 1000. 

const problemOne = (inputNum) => {
  let result = 0;
  for (let i = 0; i < inputNum; i++) {
    if ((i % 3 == 0) || (i % 5 == 0)) {
      result += i;
    }
  }
  return result;
}

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

const problemTwo = (num) => {
  let fibArray = [1, 2];
  for (let i = 2; i < num; i++) {
    fibArray.push(fibArray[i - 1] + fibArray[i - 2]);
  }
  return (num < 2) ? 0 : fibArray.filter(e => (e % 2 == 0)).reduce((a, b) => a + b, 0);
}